{"version":3,"sources":["chart.png","chart2.png","chart3.png","chart4.png","Greeting.jsx","Boards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Greeting","forwardRef","_","ref","react_default","a","createElement","urls","chart","chart2","chart3","chart4","charts","Array","from","keys","map","random","Chart","Boards_templateObject","props","_templateObject2","Aside","_templateObject3","List","_templateObject4","withScroll","Boards","Boards_Container","active","url","i","key","App","createRef","state","scrollTop","onScroll","_this","setState","window","pageYOffset","document","documentElement","console","log","addEventListener","this","current","offsetHeight","heightGreeting","removeEventListener","Fragment","src_Greeting","PureComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2ZCGxC,IAAMC,EAAYC,IAAOC,IAAVC,KAkBAC,EAXEC,qBAAW,SAACC,EAAGC,GAC5B,OACIC,EAAAC,EAAAC,cAACV,EAAD,CAAWO,IAAKA,GACZC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,q1BCPhB,IAAMC,EAAO,CACTC,IAAOC,IAAQC,IAAQC,KAGrBC,EAASC,MAAMC,KAAK,IAAID,MAAM,IAAIE,QACnCC,IAAI,kBAAMT,EAAKU,IAAO,EAAG,MAExBC,EAAQrB,IAAOC,IAAVqB,IAIiB,SAAAC,GAAK,OAAIA,EAAMZ,QASrCZ,EAAYC,IAAOC,IAAVuB,KAKTC,EAAQzB,IAAOC,IAAVyB,KAILC,EAAO3B,IAAOC,IAAV2B,IAKM,SAAAL,GAAK,OAAIA,EAAMM,WAAa,SAAW,WAGxC,SAASC,EAAOP,GAC3B,OACIhB,EAAAC,EAAAC,cAACsB,EAAD,KACIxB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACkB,EAAD,CAAME,WAAYN,EAAMS,QACnBjB,EAAOI,IAAI,SAACc,EAAKC,GAAN,OAAY3B,EAAAC,EAAAC,cAACY,EAAD,CAAOc,IAAKD,EAAGvB,MAAOsB,kBCb/CG,6MA/BX9B,IAAM+B,wBAENC,MAAQ,CACJC,UAAW,KAGfC,SAAW,WACPC,EAAKC,SAAS,CAACH,UAAWI,OAAOC,aAAeC,SAASC,gBAAgBP,YACzEQ,QAAQC,IAAIP,EAAKH,2FAIjBK,OAAOM,iBAAiB,SAAUC,KAAKV,UACvCO,QAAQC,IAAI,oBAAqBE,KAAK5C,IAAI6C,QAAQC,cAClDF,KAAKR,SAAS,CAACW,eAAgBH,KAAK5C,IAAI6C,QAAQC,8DAIhDT,OAAOW,oBAAoB,SAAUJ,KAAKV,2CAI1C,OACIjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACIhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAUlD,IAAK4C,KAAK5C,MACpBC,EAAAC,EAAAC,cAACqB,EAAD,CAAQE,OAAQkB,KAAKZ,MAAMC,WAAaW,KAAKZ,MAAMe,yBA1BjDI,iBCOEC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASnB,SAASoB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.711160ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chart.c135380f.png\";","module.exports = __webpack_public_path__ + \"static/media/chart2.01dedef9.png\";","module.exports = __webpack_public_path__ + \"static/media/chart3.3b90db7e.png\";","module.exports = __webpack_public_path__ + \"static/media/chart4.61bb53a4.png\";","import React, {forwardRef} from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    padding-left: 5%;\n    height: 65vh;\n`;\n\nconst Greeting = forwardRef((_, ref) => {\n    return (\n        <Container ref={ref}>\n            <div>\n                <h1>Greeting</h1>\n                <h2>Welcome to App</h2>\n            </div>\n        </Container>\n    );\n});\n\nexport default Greeting;\n","import React from 'react';\nimport styled from 'styled-components';\nimport random from 'lodash/random';\nimport chart from './chart.png';\nimport chart2 from './chart2.png';\nimport chart3 from './chart3.png';\nimport chart4 from './chart4.png';\n\nconst urls = [\n    chart, chart2, chart3, chart4\n];\n\nconst charts = Array.from(new Array(20).keys())\n    .map(() => urls[random(0, 3)])\n\nconst Chart = styled.div`\n    margin: 2%;\n    flex: 0 0 45%;\n    height: 30vh;\n    background-image: url(${props => props.chart});\n    background-size: cover;\n    box-shadow: 0px 5px 15px 0px rgba(0,0,0,0);\n    transition: box-shadow 0.2s ease-in-out;\n    &:hover {\n        box-shadow: 0px 5px 15px 0px rgba(0,0,0,0.1);\n    }\n`;\n\nconst Container = styled.div`\n    display: flex;\n    height: 100vh;\n`;\n\nconst Aside = styled.div`\n    flex: 0 0 20%;\n`;\n\nconst List = styled.div`\n    flex: 0 0 80%;\n    display: flex;\n    flex-wrap: wrap;\n    height: 100vh;\n    overflow: ${props => props.withScroll ? 'scroll' : 'hidden'};\n`;\n\nexport default function Boards(props) {\n    return (\n        <Container>\n            <Aside/>\n            <List withScroll={props.active}>\n                {charts.map((url, i) => <Chart key={i} chart={url}/>)}\n            </List>\n        </Container>\n    );\n}","import React, {PureComponent, createRef} from 'react';\nimport Greeting from './Greeting';\nimport Boards from './Boards';\nimport './App.css';\n\nclass App extends PureComponent {\n    ref = createRef();\n\n    state = {\n        scrollTop: 0\n    };\n\n    onScroll = () => {\n        this.setState({scrollTop: window.pageYOffset || document.documentElement.scrollTop})\n        console.log(this.state)\n    };\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.onScroll);\n        console.log('componentDidMount', this.ref.current.offsetHeight);\n        this.setState({heightGreeting: this.ref.current.offsetHeight});\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScroll);\n    }\n\n    render() {\n        return (\n            <>\n                <Greeting ref={this.ref}/>\n                <Boards active={this.state.scrollTop >= this.state.heightGreeting}/>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}